
#include <stdio.h>

void swap(int* a, int* b)
{
	int temp = *a;
	*a = *b;
	*b = temp;
}

int isMaxHeap(int A[], int i, int n)
{
	if (i >((n-1)/2))
	{
		rerturn 1;
	}
	int leftcheck = 0;
	int rightcheck = 0;
	if (a[i]>=a[2*i])
	{
	    leftcheck = isMaxHeap(a, 2*i,n);
	}
	if ((2*i+1)<n)
	{
	    if(a[i]>a[2*i+1])
	    {
	        rightcheck = isMaxHeap(a, 2*i+1, n);
	    }
	   
	}
	return leftcheck && rightcheck;
}


void heapify(int A[], int i, int s)
{
	int m = i;
	int left = 2 * i + 1;
	int right = 2 * i + 2;

	if (left < s && A[left] > A[m])
	{
		m = left;
	}

	if (right < s && A[right] > A[m])
	{
		m = right;
	}

	if (m != i)
	{
		swap(&A[i], &A[m]);
		heapify(A, m, s);
	}
}

void printArray(int A[], int n)
{
	for (int i = 0; i < n; i++)
	{
		printf("%d ", A[i]);
	}
	printf("\n");
}


void buildheap(int A[], int n)
{
		
	for (int i = n / 2 - 1; i >= 0; i--)
	{
		heapify(A, i, n);
		printArray(A, n);
	}
}

void heapSort(int A[], int n)
{
	buildheap(A, n);


	for (int i = n - 1; i >= 0; i--)
	{
		swap(&A[0], &A[i]);
		heapify(A, 0, i);
		printArray(A, n);
	}
}


void main()
{
	int A[] = { 11, 0, 9, 19, 8, 1, 5, 13, 18, 7 };
	int n = sizeof(A) / sizeof(A[0]);
	heapSort(A, n);
	printf("State of A after heapSort: \n");
	printArray(A, n);

}
